# Task Orchestrator Agent Configuration
# Version: 1.0.0
# Last updated: 2025-10-18

version: "1.0.0"
schema_version: "1.0"

# Agent Delegation Map
# Maps task types to specialized agents with trigger keywords and execution rules

task_types:
  backend:
    description: "Python/FastAPI backend development, API endpoints, async operations, database models"
    primary_agent: "fastapi-backend-expert"
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "backend"
      - "fastapi"
      - "api endpoint"
      - "database model"
      - "sqlalchemy"
      - "taskiq"
      - "async"
      - "pydantic"
    parallel_execution: false
    max_concurrent: 1

  frontend:
    description: "React/TypeScript frontend development, components, UI/UX, state management"
    primary_agent: "react-frontend-architect"
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "frontend"
      - "react"
      - "component"
      - "typescript"
      - "ui"
      - "dashboard"
      - "zustand"
      - "tailwind"
    parallel_execution: false
    max_concurrent: 1

  full_stack:
    description: "Full-stack features requiring both backend and frontend coordination"
    primary_agent: ["fastapi-backend-expert", "react-frontend-architect"]
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "full-stack"
      - "full stack"
      - "end-to-end"
      - "feature"
      - "implement"
    parallel_execution: true
    max_concurrent: 2
    sync_points:
      - "API contract definition"
      - "Type synchronization"
      - "Integration testing"

  testing:
    description: "Test creation, pytest, test coverage, validation"
    primary_agent: "pytest-test-master"
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "test"
      - "pytest"
      - "coverage"
      - "validation"
      - "test suite"
    parallel_execution: false
    max_concurrent: 1

  quality:
    description: "Code cleanup, refactoring, dead code removal, comment cleanup"
    primary_agent: ["codebase-cleaner", "comment-cleaner"]
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "cleanup"
      - "refactor"
      - "quality"
      - "dead code"
      - "comments"
      - "optimize"
    parallel_execution: true
    max_concurrent: 2

  devops:
    description: "CI/CD, Docker, deployment, infrastructure, environment setup"
    primary_agent: "devops-expert"
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "devops"
      - "docker"
      - "ci/cd"
      - "deployment"
      - "infrastructure"
      - "github actions"
    parallel_execution: false
    max_concurrent: 1

  architecture:
    description: "Architecture review, compliance check, structural analysis"
    primary_agent: "architecture-guardian"
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "architecture"
      - "review"
      - "compliance"
      - "structure"
      - "design pattern"
    parallel_execution: false
    max_concurrent: 1

  documentation:
    description: "Documentation creation, README, API docs, markdown files"
    primary_agent: "documentation-expert"
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "documentation"
      - "docs"
      - "readme"
      - "api documentation"
      - "markdown"
    parallel_execution: false
    max_concurrent: 1

  exploration:
    description: "Codebase exploration, searching for patterns, understanding structure"
    primary_agent: "Explore"
    fallback_agent: "general-purpose"
    trigger_keywords:
      - "explore"
      - "find"
      - "search"
      - "where is"
      - "show me"
    parallel_execution: false
    max_concurrent: 1
    thoroughness_levels:
      - "quick"
      - "medium"
      - "very thorough"

# Execution Rules
execution_rules:
  max_parallel_agents: 4
  fallback_strategy:
    on_agent_unavailable: "use_fallback"
    on_agent_error: "retry_once_then_fallback"
    on_unknown_task: "use_general_purpose"

  coordination_patterns:
    - "parallel_independent"      # Independent tasks (backend + frontend)
    - "sequential_handoff"        # DB migration → API → Frontend
    - "parallel_with_sync"        # Full-stack with sync points
    - "primary_with_reviewers"    # Implementation + review
    - "incremental_validation"    # Multi-phase with validation
    - "fan_out_fan_in"           # Multiple agents → aggregation
    - "conditional_branching"     # Dynamic agent selection

# Artifact Management
artifact_config:
  base_directory: ".artifacts"
  session_structure: "{feature-name}/{timestamp}"
  retention_policy:
    default_days: 7
    require_user_confirmation: true  # NEVER auto-delete without explicit user approval

  report_standards:
    format: "markdown"
    required_sections:
      - "Summary"
      - "Changes Made"
      - "Implementation Details"
      - "Technical Decisions"
      - "Testing Results"
      - "Issues Encountered"
      - "Dependencies"
      - "Next Steps"
      - "Completion Checklist"

# Experimental Features (for future agents)
experimental:
  enabled: false
  agents: []

# Deprecation Notices
deprecated:
  agents: []
  migration_guide: "See CHANGELOG.md for migration instructions"
