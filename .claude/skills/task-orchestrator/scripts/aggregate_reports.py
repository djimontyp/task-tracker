#!/usr/bin/env python3
"""
Aggregate Agent Reports

Combines individual agent reports into a comprehensive summary.
"""

import argparse
import json
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any


def find_agent_reports(session_dir: Path) -> List[Path]:
    """Find all agent report files in session directory."""
    reports_dir = session_dir / "agent-reports"
    if not reports_dir.exists():
        return []

    return sorted(reports_dir.glob("*-report.md"))


def parse_report(report_path: Path) -> Dict[str, Any]:
    """Parse individual agent report."""
    with open(report_path) as f:
        content = f.read()

    metadata = {
        "agent": report_path.stem.replace("-report", ""),
        "path": str(report_path),
        "size": report_path.stat().st_size,
        "content": content
    }

    if "# Summary" in content:
        summary_start = content.index("# Summary")
        summary_end = content.find("#", summary_start + 10)
        if summary_end == -1:
            summary_end = len(content)
        metadata["summary"] = content[summary_start:summary_end].strip()

    return metadata


def create_summary_report(
    session_dir: Path,
    reports: List[Dict[str, Any]]
) -> str:
    """Create aggregated summary report."""
    context_file = session_dir / "context.json"
    if context_file.exists():
        with open(context_file) as f:
            context = json.load(f)
    else:
        context = {}

    feature_name = context.get("feature_name", "unknown")
    timestamp = context.get("timestamp", datetime.now().strftime("%Y%m%d_%H%M%S"))

    summary = f"""# Orchestration Summary: {feature_name}

**Session ID:** {timestamp}
**Date:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Agents Executed:** {len(reports)}

---

## Executive Summary

This orchestration session coordinated {len(reports)} specialized agent(s) to implement the **{feature_name}** feature.

### Agents Involved

"""

    for report in reports:
        agent_name = report["agent"]
        summary += f"- **{agent_name}**: "
        if "summary" in report:
            first_line = report["summary"].split("\n")[0].replace("# Summary", "").strip()
            summary += first_line or "Completed tasks"
        else:
            summary += "Report generated"
        summary += "\n"

    summary += "\n---\n\n## Detailed Reports\n\n"

    for report in reports:
        agent_name = report["agent"]
        summary += f"### {agent_name} Report\n\n"
        summary += f"**Source:** `{report['path']}`\n\n"

        if "summary" in report:
            summary += report["summary"] + "\n\n"
        else:
            summary += f"See full report: [{agent_name}-report.md]({report['path']})\n\n"

        summary += "---\n\n"

    summary += """## Next Steps

1. Review individual agent reports for detailed implementation notes
2. Verify all changes are working as expected
3. Run tests and quality checks
4. Update documentation if needed
5. Consider cleanup of artifacts if session is complete

---

*This summary was automatically generated by the Task Orchestrator.*
"""

    return summary


def aggregate_reports(session_dir: Path, output_file: Path | None = None) -> None:
    """
    Aggregate all agent reports in session directory.

    Args:
        session_dir: Path to orchestration session directory
        output_file: Optional custom output file path
    """
    if not session_dir.exists():
        print(f"❌ Session directory not found: {session_dir}")
        return

    report_paths = find_agent_reports(session_dir)
    if not report_paths:
        print(f"⚠️  No agent reports found in {session_dir}")
        return

    print(f"📊 Found {len(report_paths)} agent report(s)")

    reports = []
    for report_path in report_paths:
        print(f"  📄 Parsing {report_path.name}")
        reports.append(parse_report(report_path))

    summary_content = create_summary_report(session_dir, reports)

    if output_file is None:
        output_file = session_dir / "summary.md"

    with open(output_file, "w") as f:
        f.write(summary_content)

    print(f"\n✅ Summary report created: {output_file}")
    print(f"📝 Aggregated {len(reports)} agent reports")

    context_file = session_dir / "context.json"
    if context_file.exists():
        with open(context_file) as f:
            context = json.load(f)

        context["summary_created_at"] = datetime.now().isoformat()
        context["reports_aggregated"] = len(reports)
        context["summary_path"] = str(output_file)

        with open(context_file, "w") as f:
            json.dump(context, f, indent=2)


def main():
    parser = argparse.ArgumentParser(description="Aggregate agent reports into summary")
    parser.add_argument(
        "session_dir",
        type=Path,
        help="Path to orchestration session directory"
    )
    parser.add_argument(
        "--output",
        type=Path,
        help="Custom output file path (default: session_dir/summary.md)"
    )

    args = parser.parse_args()

    aggregate_reports(args.session_dir, args.output)


if __name__ == "__main__":
    main()
