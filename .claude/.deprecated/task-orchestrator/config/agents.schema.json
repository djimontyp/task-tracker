{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Task Orchestrator Agent Configuration Schema",
  "description": "JSON Schema for validating agents.yaml configuration",
  "type": "object",
  "required": ["version", "schema_version", "task_types", "execution_rules", "artifact_config"],
  "properties": {
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "description": "Semantic version of the configuration"
    },
    "schema_version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+$",
      "description": "Schema version for compatibility tracking"
    },
    "task_types": {
      "type": "object",
      "description": "Map of task types to agent configurations",
      "patternProperties": {
        "^[a-z_]+$": {
          "type": "object",
          "required": ["description", "primary_agent", "fallback_agent", "trigger_keywords", "parallel_execution"],
          "properties": {
            "description": {
              "type": "string",
              "minLength": 10,
              "description": "Clear description of task type"
            },
            "primary_agent": {
              "oneOf": [
                {"type": "string"},
                {"type": "array", "items": {"type": "string"}, "minItems": 1}
              ],
              "description": "Primary agent(s) for this task type"
            },
            "fallback_agent": {
              "type": "string",
              "description": "Fallback agent if primary is unavailable"
            },
            "trigger_keywords": {
              "type": "array",
              "items": {"type": "string"},
              "minItems": 1,
              "uniqueItems": true,
              "description": "Keywords that trigger this task type"
            },
            "parallel_execution": {
              "type": "boolean",
              "description": "Whether agents can run in parallel"
            },
            "max_concurrent": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "description": "Maximum concurrent agents for this task"
            },
            "sync_points": {
              "type": "array",
              "items": {"type": "string"},
              "description": "Synchronization points for parallel execution"
            },
            "thoroughness_levels": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["quick", "medium", "very thorough"]
              },
              "description": "Available thoroughness levels for exploration"
            }
          }
        }
      },
      "additionalProperties": false
    },
    "execution_rules": {
      "type": "object",
      "required": ["max_parallel_agents", "fallback_strategy", "coordination_patterns"],
      "properties": {
        "max_parallel_agents": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Global limit on parallel agent execution"
        },
        "fallback_strategy": {
          "type": "object",
          "required": ["on_agent_unavailable", "on_agent_error", "on_unknown_task"],
          "properties": {
            "on_agent_unavailable": {
              "type": "string",
              "enum": ["use_fallback", "fail", "ask_user"],
              "description": "Action when primary agent is unavailable"
            },
            "on_agent_error": {
              "type": "string",
              "enum": ["retry_once_then_fallback", "retry_twice_then_fallback", "fail", "use_fallback"],
              "description": "Action when agent encounters an error"
            },
            "on_unknown_task": {
              "type": "string",
              "enum": ["use_general_purpose", "ask_user", "fail"],
              "description": "Action for unrecognized task types"
            }
          }
        },
        "coordination_patterns": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "parallel_independent",
              "sequential_handoff",
              "parallel_with_sync",
              "primary_with_reviewers",
              "incremental_validation",
              "fan_out_fan_in",
              "conditional_branching"
            ]
          },
          "minItems": 1,
          "uniqueItems": true,
          "description": "Available coordination patterns"
        }
      }
    },
    "artifact_config": {
      "type": "object",
      "required": ["base_directory", "session_structure", "retention_policy", "report_standards"],
      "properties": {
        "base_directory": {
          "type": "string",
          "pattern": "^[^/].*$",
          "description": "Base directory for artifacts (relative path)"
        },
        "session_structure": {
          "type": "string",
          "description": "Template for session directory structure"
        },
        "retention_policy": {
          "type": "object",
          "required": ["default_days", "require_user_confirmation"],
          "properties": {
            "default_days": {
              "type": "integer",
              "minimum": 1,
              "description": "Default retention period in days"
            },
            "require_user_confirmation": {
              "type": "boolean",
              "description": "Whether to require user confirmation before cleanup"
            }
          }
        },
        "report_standards": {
          "type": "object",
          "required": ["format", "required_sections"],
          "properties": {
            "format": {
              "type": "string",
              "enum": ["markdown", "json", "yaml"],
              "description": "Report output format"
            },
            "required_sections": {
              "type": "array",
              "items": {"type": "string"},
              "minItems": 1,
              "uniqueItems": true,
              "description": "Required sections in agent reports"
            }
          }
        }
      }
    },
    "experimental": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether experimental features are enabled"
        },
        "agents": {
          "type": "array",
          "items": {"type": "string"},
          "description": "List of experimental agents"
        }
      }
    },
    "deprecated": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "array",
          "items": {"type": "string"},
          "description": "List of deprecated agents"
        },
        "migration_guide": {
          "type": "string",
          "description": "Guide for migrating from deprecated agents"
        }
      }
    }
  }
}
