{
  "scenario": "technical_deep_dive",
  "language": "uk",
  "description": "–ì–ª–∏–±–æ–∫–µ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –∑ –∫–æ–¥–æ–º, –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–º–∏ —Ä—ñ—à–µ–Ω–Ω—è–º–∏ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å–∏.",
  "messages": [
    {
      "order": 1,
      "text": "–ü–µ—Ä–µ–≥–ª—è–Ω—É–≤ –Ω–∞—à LLM —Å–µ—Ä–≤—ñ—Å. –ß–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ hexagonal architecture?",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "architecture_question",
        "content_categories": ["architecture", "design_patterns"]
      }
    },
    {
      "order": 2,
      "text": "Framework independence. –ú–æ–∂–µ–º–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ Pydantic AI –Ω–∞ LangChain –±–µ–∑ –∑–º—ñ–Ω–∏ domain –ª–æ–≥—ñ–∫–∏",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "architecture_explanation",
        "content_categories": ["design_rationale", "maintainability"]
      }
    },
    {
      "order": 3,
      "text": "–ê —è–∫ —Å–∞–º–µ —Ü–µ –¥–æ—Å—è–≥–∞—î—Ç—å—Å—è?",
      "language": "uk",
      "expected_label": "weak_signal",
      "metadata": {
        "type": "implementation_question",
        "content_categories": ["technical_details"]
      }
    },
    {
      "order": 4,
      "text": "–ß–µ—Ä–µ–∑ ports & adapters. –î–∏–≤–∏—Å—å:\n\n```python\nclass LLMPort(Protocol):\n    async def generate(self, prompt: str) -> str: ...\n\nclass PydanticAIAdapter(LLMPort):\n    async def generate(self, prompt: str) -> str:\n        # Pydantic AI implementation\n        ...\n```",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "code_example",
        "content_categories": ["implementation_details", "code_reference"]
      }
    },
    {
      "order": 5,
      "text": "–ê–∞, —Ä–æ–∑—É–º—ñ—é! Protocol = port, concrete class = adapter",
      "language": "uk",
      "expected_label": "weak_signal",
      "metadata": {
        "type": "understanding_confirmation",
        "content_categories": ["learning"]
      }
    },
    {
      "order": 6,
      "text": "–¢–æ—á–Ω–æ. Domain —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∏–π–º–∞—é—Ç—å LLMPort, –Ω–µ –∑–Ω–∞—é—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—é. –û—Å—å –ø—Ä–∏–∫–ª–∞–¥ –∑ –Ω–∞—à–æ–≥–æ –∫–æ–¥—É:\n\napp/services/llm/domain/ports/llm_port.py - –ø–æ—Ä—Ç\napp/services/llm/infrastructure/pydantic_ai_adapter.py - –∞–¥–∞–ø—Ç–µ—Ä",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "architecture_example",
        "content_categories": ["code_reference", "file_locations"]
      }
    },
    {
      "order": 7,
      "text": "–ß—É–¥–æ–≤–æ! –ê dependency injection —è–∫ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ?",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "technical_question",
        "content_categories": ["dependency_injection", "architecture"]
      }
    },
    {
      "order": 8,
      "text": "FastAPI Depends. –í app/dependencies.py —î —Ñ–∞–±—Ä–∏–∫–∏:\n\n```python\ndef get_llm_service() -> LLMService:\n    adapter = PydanticAIAdapter()\n    return LLMService(llm_port=adapter)\n```\n\n–ü–æ—Ç—ñ–º –≤ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞—Ö:\n```python\n@router.post(\"/analyze\")\nasync def analyze(\n    service: LLMService = Depends(get_llm_service)\n):\n    ...\n```",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "implementation_details",
        "content_categories": ["code_example", "dependency_injection"]
      }
    },
    {
      "order": 9,
      "text": "–Ñ —è–∫—ñ—Å—å —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–æ —Ü–µ–π –ø–∞—Ç–µ—Ä–Ω? –•–æ—á—É –≥–ª–∏–±—à–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏",
      "language": "uk",
      "expected_label": "weak_signal",
      "metadata": {
        "type": "learning_request",
        "content_categories": ["resources"]
      }
    },
    {
      "order": 10,
      "text": "–¢–∞–∫! –î–∏–≤–∏—Å—å:\n1. https://alistair.cockburn.us/hexagonal-architecture/ - –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç—Ç—è Cockburn\n2. https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749 - Netflix –ø—Ä–æ –ø—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è\n3. docs/content/en/architecture/llm-architecture.md - –Ω–∞—à–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "resource_sharing",
        "content_categories": ["documentation", "learning_resources", "links"]
      }
    },
    {
      "order": 11,
      "text": "–î—è–∫—É—é! üôè",
      "language": "uk",
      "expected_label": "noise",
      "metadata": {
        "type": "gratitude",
        "content_categories": []
      }
    },
    {
      "order": 12,
      "text": "–©–µ –º–æ–º–µ–Ω—Ç - —á–æ–º—É –æ–±—Ä–∞–ª–∏ Pydantic AI, –∞ –Ω–µ LangChain?",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "technology_choice_question",
        "content_categories": ["framework_comparison"]
      }
    },
    {
      "order": 13,
      "text": "–ö—ñ–ª—å–∫–∞ –ø—Ä–∏—á–∏–Ω:\n1. Type safety - Pydantic AI –º–∞—î –∫—Ä–∞—â–µ mypy –ø–æ–∫—Ä–∏—Ç—Ç—è\n2. –ü—Ä–æ—Å—Ç–æ—Ç–∞ - –º–µ–Ω—à–µ boilerplate –¥–ª—è –±–∞–∑–æ–≤–∏—Ö use cases\n3. –®–≤–∏–¥–∫—ñ—Å—Ç—å - –Ω–∏–∂—á–∞ latency —á–µ—Ä–µ–∑ –º–µ–Ω—à–µ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ–π\n4. Integration - –ø—Ä–∏—Ä–æ–¥–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ FastAPI (–æ–±–∏–¥–≤–∞ –Ω–∞ Pydantic)\n\n–õ–∞–Ω–≥—á–µ–π–Ω –ø–æ—Ç—É–∂–Ω—ñ—à–∏–π –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö chains, –∞–ª–µ –Ω–∞–º –ø–æ–∫–∏ –Ω–µ —Ç—Ä–µ–±–∞",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "technology_decision_rationale",
        "content_categories": ["framework_comparison", "decision_justification"]
      }
    },
    {
      "order": 14,
      "text": "–õ–æ–≥—ñ—á–Ω–æ. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—à–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü—ñ—è - –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º–æ –Ω–æ–≤–∏–π adapter",
      "language": "uk",
      "expected_label": "strong_signal",
      "metadata": {
        "type": "architecture_understanding",
        "content_categories": ["extensibility"]
      }
    },
    {
      "order": 15,
      "text": "–°–∞–º–µ —Ç–∞–∫! –û—Ç –¥–ª—è —á–æ–≥–æ hexagonal architecture üéØ",
      "language": "uk",
      "expected_label": "weak_signal",
      "metadata": {
        "type": "confirmation",
        "content_categories": []
      }
    }
  ],
  "expected_extraction": {
    "topics": [
      {
        "title": "Hexagonal Architecture –≤ LLM —Å–µ—Ä–≤—ñ—Å—ñ",
        "atoms": [
          "Ports & Adapters –ø–∞—Ç—Ç–µ—Ä–Ω: Protocol = port, concrete class = adapter",
          "LLMPort –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–æ–∑–≤–æ–ª—è—î –º—ñ–Ω—è—Ç–∏ Pydantic AI ‚Üî LangChain –±–µ–∑ –∑–º—ñ–Ω–∏ domain",
          "Dependency injection —á–µ—Ä–µ–∑ FastAPI Depends + —Ñ–∞–±—Ä–∏–∫–∏ –≤ app/dependencies.py",
          "–†–µ—Å—É—Ä—Å–∏: Cockburn original, Netflix blog, docs/llm-architecture.md"
        ]
      },
      {
        "title": "–í–∏–±—ñ—Ä Pydantic AI –∑–∞–º—ñ—Å—Ç—å LangChain",
        "atoms": [
          "Type safety - –∫—Ä–∞—â–µ mypy –ø–æ–∫—Ä–∏—Ç—Ç—è",
          "–ü—Ä–æ—Å—Ç–æ—Ç–∞ - –º–µ–Ω—à–µ boilerplate",
          "–®–≤–∏–¥–∫—ñ—Å—Ç—å - –Ω–∏–∂—á–∞ latency",
          "Integration - –ø—Ä–∏—Ä–æ–¥–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ FastAPI"
        ]
      }
    ]
  }
}
