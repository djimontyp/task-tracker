"""add failed_tasks table for DLQ

Revision ID: 158cf0d2da12
Revises: 1e24b5c224cf
Create Date: 2025-10-28 15:25:19.104935

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "158cf0d2da12"
down_revision: Union[str, Sequence[str], None] = "1e24b5c224cf"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Use IF EXISTS for all DROP operations to support fresh installations
    op.execute("DROP INDEX IF EXISTS idx_atoms_embedding_hnsw")
    op.execute("DROP INDEX IF EXISTS idx_failed_tasks_created_at")
    op.create_index(
        "idx_failed_tasks_created_at",
        "failed_tasks",
        ["created_at"],
        unique=False,
        postgresql_ops={"created_at": "DESC"},
    )
    op.execute("DROP INDEX IF EXISTS idx_failed_tasks_status_created")
    op.create_index(
        "idx_failed_tasks_status_created",
        "failed_tasks",
        ["status", "created_at"],
        unique=False,
        postgresql_ops={"created_at": "DESC"},
    )
    op.execute("DROP INDEX IF EXISTS idx_messages_embedding_hnsw")
    op.execute("DROP INDEX IF EXISTS idx_task_logs_composite")
    op.create_index(
        "idx_task_logs_composite",
        "task_execution_logs",
        ["task_name", "status", "created_at"],
        unique=False,
        postgresql_ops={"created_at": "DESC"},
    )
    op.execute("DROP INDEX IF EXISTS idx_task_logs_created_at")
    op.create_index(
        "idx_task_logs_created_at",
        "task_execution_logs",
        ["created_at"],
        unique=False,
        postgresql_ops={"created_at": "DESC"},
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_task_logs_created_at", table_name="task_execution_logs", postgresql_ops={"created_at": "DESC"})
    op.create_index(
        op.f("idx_task_logs_created_at"), "task_execution_logs", [sa.literal_column("created_at DESC")], unique=False
    )
    op.drop_index("idx_task_logs_composite", table_name="task_execution_logs", postgresql_ops={"created_at": "DESC"})
    op.create_index(
        op.f("idx_task_logs_composite"),
        "task_execution_logs",
        ["task_name", "status", sa.literal_column("created_at DESC")],
        unique=False,
    )
    op.create_index(
        op.f("idx_messages_embedding_hnsw"),
        "messages",
        ["embedding"],
        unique=False,
        postgresql_ops={"embedding": "vector_cosine_ops"},
        postgresql_with={"m": "16", "ef_construction": "64"},
        postgresql_using="hnsw",
    )
    op.drop_index("idx_failed_tasks_status_created", table_name="failed_tasks", postgresql_ops={"created_at": "DESC"})
    op.create_index(
        op.f("idx_failed_tasks_status_created"),
        "failed_tasks",
        ["status", sa.literal_column("created_at DESC")],
        unique=False,
    )
    op.drop_index("idx_failed_tasks_created_at", table_name="failed_tasks", postgresql_ops={"created_at": "DESC"})
    op.create_index(
        op.f("idx_failed_tasks_created_at"), "failed_tasks", [sa.literal_column("created_at DESC")], unique=False
    )
    op.create_index(
        op.f("idx_atoms_embedding_hnsw"),
        "atoms",
        ["embedding"],
        unique=False,
        postgresql_ops={"embedding": "vector_cosine_ops"},
        postgresql_with={"m": "16", "ef_construction": "64"},
        postgresql_using="hnsw",
    )
    # ### end Alembic commands ###
