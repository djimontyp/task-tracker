"""initial_migration

Revision ID: d510922791ac
Revises:
Create Date: 2025-10-18 21:15:54.773292

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel.sql.sqltypes
import pgvector.sqlalchemy.vector

# revision identifiers, used by Alembic.
revision: str = "d510922791ac"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "atoms",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("type", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("confidence", sa.Float(), nullable=True),
        sa.Column("user_approved", sa.Boolean(), nullable=False),
        sa.Column("meta", sa.JSON(), nullable=True),
        sa.Column("embedding", pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_atoms_title"), "atoms", ["title"], unique=False)
    op.create_table(
        "llm_providers",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("type", sa.Enum("ollama", "openai", name="providertype"), nullable=False),
        sa.Column("base_url", sa.Text(), nullable=True),
        sa.Column("api_key_encrypted", sa.LargeBinary(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "validation_status",
            sa.Enum("pending", "validating", "connected", "error", name="validationstatus"),
            nullable=False,
        ),
        sa.Column("validation_error", sa.Text(), nullable=True),
        sa.Column("validated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_llm_providers_name"), "llm_providers", ["name"], unique=True)
    op.create_table(
        "message_ingestion_jobs",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("source_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("source_identifiers", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("time_window_start", sa.DateTime(timezone=True), nullable=True),
        sa.Column("time_window_end", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "status",
            sa.Enum("pending", "running", "completed", "failed", "cancelled", name="ingestionstatus"),
            nullable=False,
        ),
        sa.Column("messages_fetched", sa.Integer(), nullable=False),
        sa.Column("messages_stored", sa.Integer(), nullable=False),
        sa.Column("messages_skipped", sa.Integer(), nullable=False),
        sa.Column("errors_count", sa.Integer(), nullable=False),
        sa.Column("current_batch", sa.Integer(), nullable=False),
        sa.Column("total_batches", sa.Integer(), nullable=True),
        sa.Column("error_log", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sources",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("type", sa.Enum("telegram", "slack", "email", "api", name="sourcetype"), nullable=False),
        sa.Column("config", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "task_configs",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("response_schema", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_task_configs_name"), "task_configs", ["name"], unique=True)
    op.create_table(
        "task_entities",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("priority", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("category", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "topics",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("icon", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("color", sqlmodel.sql.sqltypes.AutoString(length=7), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_topics_name"), "topics", ["name"], unique=True)
    op.create_table(
        "users",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
        sa.Column("avatar_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_bot", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_phone"), "users", ["phone"], unique=True)
    op.create_table(
        "webhook_settings",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("config", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "agent_configs",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("provider_id", sa.Uuid(), nullable=False),
        sa.Column("model_name", sa.Text(), nullable=False),
        sa.Column("system_prompt", sa.Text(), nullable=False),
        sa.Column("temperature", sa.Float(), nullable=True),
        sa.Column("max_tokens", sa.Integer(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["llm_providers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_agent_configs_name"), "agent_configs", ["name"], unique=True)
    op.create_table(
        "atom_links",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("from_atom_id", sa.BigInteger(), nullable=False),
        sa.Column("to_atom_id", sa.BigInteger(), nullable=False),
        sa.Column("link_type", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
        sa.Column("strength", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["from_atom_id"],
            ["atoms.id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_atom_id"],
            ["atoms.id"],
        ),
        sa.PrimaryKeyConstraint("from_atom_id", "to_atom_id"),
    )
    op.create_table(
        "classification_experiments",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("provider_id", sa.Uuid(), nullable=False),
        sa.Column("model_name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column(
            "status", sa.Enum("pending", "running", "completed", "failed", name="experimentstatus"), nullable=False
        ),
        sa.Column("message_count", sa.Integer(), nullable=False),
        sa.Column("topics_snapshot", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("accuracy", sa.Float(), nullable=True),
        sa.Column("avg_confidence", sa.Float(), nullable=True),
        sa.Column("avg_execution_time_ms", sa.Float(), nullable=True),
        sa.Column("confusion_matrix", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("classification_results", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["llm_providers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "project_configs",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("keywords", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("glossary", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("components", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("default_assignee_ids", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("pm_user_id", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("priority_rules", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("version", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["pm_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_project_configs_name"), "project_configs", ["name"], unique=True)
    op.create_table(
        "telegram_profiles",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("telegram_user_id", sa.BigInteger(), nullable=False),
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
        sa.Column("language_code", sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
        sa.Column("is_bot", sa.Boolean(), nullable=False),
        sa.Column("is_premium", sa.Boolean(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("source_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["sources.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_index(
        op.f("ix_telegram_profiles_telegram_user_id"), "telegram_profiles", ["telegram_user_id"], unique=True
    )
    op.create_table(
        "topic_atoms",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("topic_id", sa.BigInteger(), nullable=False),
        sa.Column("atom_id", sa.BigInteger(), nullable=False),
        sa.Column("position", sa.Integer(), nullable=True),
        sa.Column("note", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["atom_id"],
            ["atoms.id"],
        ),
        sa.ForeignKeyConstraint(
            ["topic_id"],
            ["topics.id"],
        ),
        sa.PrimaryKeyConstraint("topic_id", "atom_id"),
    )
    op.create_table(
        "agent_task_assignments",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("agent_id", sa.Uuid(), nullable=False),
        sa.Column("task_id", sa.Uuid(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("assigned_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agent_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["task_configs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("agent_id", "task_id", name="uq_agent_task"),
    )
    op.create_table(
        "messages",
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("external_message_id", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("sent_at", sa.DateTime(), nullable=False),
        sa.Column("source_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.Column("telegram_profile_id", sa.Integer(), nullable=True),
        sa.Column("avatar_url", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("classification", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("confidence", sa.Float(), nullable=True),
        sa.Column("analyzed", sa.Boolean(), nullable=False),
        sa.Column("analysis_status", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("included_in_runs", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("topic_id", sa.Integer(), nullable=True),
        sa.Column("embedding", pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
        sa.Column("importance_score", sa.Float(), nullable=True),
        sa.Column("noise_classification", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("noise_factors", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["sources.id"],
        ),
        sa.ForeignKeyConstraint(
            ["telegram_profile_id"],
            ["telegram_profiles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["topic_id"],
            ["topics.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_messages_external_message_id"), "messages", ["external_message_id"], unique=False)
    op.create_index(op.f("ix_messages_topic_id"), "messages", ["topic_id"], unique=False)
    op.create_table(
        "analysis_runs",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("time_window_start", sa.DateTime(timezone=True), nullable=True),
        sa.Column("time_window_end", sa.DateTime(timezone=True), nullable=True),
        sa.Column("agent_assignment_id", sa.Uuid(), nullable=False),
        sa.Column("project_config_id", sa.Uuid(), nullable=True),
        sa.Column("config_snapshot", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("trigger_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("triggered_by_user_id", sa.Integer(), nullable=True),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("closed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("proposals_total", sa.Integer(), nullable=False),
        sa.Column("proposals_approved", sa.Integer(), nullable=False),
        sa.Column("proposals_rejected", sa.Integer(), nullable=False),
        sa.Column("proposals_pending", sa.Integer(), nullable=False),
        sa.Column("total_messages_in_window", sa.Integer(), nullable=False),
        sa.Column("messages_after_prefilter", sa.Integer(), nullable=False),
        sa.Column("batches_created", sa.Integer(), nullable=False),
        sa.Column("llm_tokens_used", sa.Integer(), nullable=False),
        sa.Column("cost_estimate", sa.Float(), nullable=False),
        sa.Column("error_log", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("accuracy_metrics", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["agent_assignment_id"],
            ["agent_task_assignments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["project_config_id"],
            ["project_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["triggered_by_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tasks",
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "category",
            sa.Enum("bug", "feature", "improvement", "question", "chore", name="taskcategory"),
            nullable=False,
        ),
        sa.Column("priority", sa.Enum("low", "medium", "high", "critical", name="taskpriority"), nullable=False),
        sa.Column("status", sa.Enum("open", "in_progress", "completed", "closed", name="taskstatus"), nullable=False),
        sa.Column("classification_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("ai_generated", sa.Boolean(), nullable=False),
        sa.Column("confidence_score", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("source_id", sa.Integer(), nullable=False),
        sa.Column("source_message_id", sa.Integer(), nullable=True),
        sa.Column("assigned_to", sa.Integer(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["assigned_to"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["sources.id"],
        ),
        sa.ForeignKeyConstraint(
            ["source_message_id"],
            ["messages.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "task_proposals",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("analysis_run_id", sa.Uuid(), nullable=False),
        sa.Column("proposed_title", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
        sa.Column("proposed_description", sa.Text(), nullable=False),
        sa.Column("proposed_priority", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("proposed_category", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("proposed_project_id", sa.Uuid(), nullable=True),
        sa.Column("proposed_tags", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("proposed_parent_id", sa.Uuid(), nullable=True),
        sa.Column("source_message_ids", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("message_count", sa.Integer(), nullable=False),
        sa.Column("time_span_seconds", sa.Integer(), nullable=False),
        sa.Column("proposed_sub_tasks", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("similar_task_id", sa.Uuid(), nullable=True),
        sa.Column("similarity_score", sa.Float(), nullable=True),
        sa.Column("similarity_type", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("diff_summary", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("llm_recommendation", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("confidence", sa.Float(), nullable=False),
        sa.Column("reasoning", sa.Text(), nullable=False),
        sa.Column("project_classification_confidence", sa.Float(), nullable=True),
        sa.Column("project_keywords_matched", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.Column("reviewed_by_user_id", sa.Integer(), nullable=True),
        sa.Column("reviewed_at", sa.DateTime(), nullable=True),
        sa.Column("review_action", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("review_notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["analysis_run_id"],
            ["analysis_runs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["proposed_parent_id"],
            ["task_entities.id"],
        ),
        sa.ForeignKeyConstraint(
            ["proposed_project_id"],
            ["project_configs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reviewed_by_user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["similar_task_id"],
            ["task_entities.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("task_proposals")
    op.drop_table("tasks")
    op.drop_table("analysis_runs")
    op.drop_index(op.f("ix_messages_topic_id"), table_name="messages")
    op.drop_index(op.f("ix_messages_external_message_id"), table_name="messages")
    op.drop_table("messages")
    op.drop_table("agent_task_assignments")
    op.drop_table("topic_atoms")
    op.drop_index(op.f("ix_telegram_profiles_telegram_user_id"), table_name="telegram_profiles")
    op.drop_table("telegram_profiles")
    op.drop_index(op.f("ix_project_configs_name"), table_name="project_configs")
    op.drop_table("project_configs")
    op.drop_table("classification_experiments")
    op.drop_table("atom_links")
    op.drop_index(op.f("ix_agent_configs_name"), table_name="agent_configs")
    op.drop_table("agent_configs")
    op.drop_table("webhook_settings")
    op.drop_index(op.f("ix_users_phone"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_topics_name"), table_name="topics")
    op.drop_table("topics")
    op.drop_table("task_entities")
    op.drop_index(op.f("ix_task_configs_name"), table_name="task_configs")
    op.drop_table("task_configs")
    op.drop_table("sources")
    op.drop_table("message_ingestion_jobs")
    op.drop_index(op.f("ix_llm_providers_name"), table_name="llm_providers")
    op.drop_table("llm_providers")
    op.drop_index(op.f("ix_atoms_title"), table_name="atoms")
    op.drop_table("atoms")
    # ### end Alembic commands ###
