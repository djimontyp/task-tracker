"""Add TaskExecutionLog model for monitoring

Revision ID: 9b7be1927504
Revises: 143e95e46ca7
Create Date: 2025-10-27 12:44:46.768008

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9b7be1927504"
down_revision: Union[str, Sequence[str], None] = "143e95e46ca7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("approval_rules")
    # NOTE: Index modifications commented out as they reference task_execution_logs
    # which may not exist yet in fresh installations. The table is created in
    # a later migration (158cf0d2da12).
    # op.execute("DROP INDEX IF EXISTS idx_task_logs_composite")
    # op.create_index(
    #     "idx_task_logs_composite",
    #     "task_execution_logs",
    #     ["task_name", "status", "created_at"],
    #     unique=False,
    #     postgresql_ops={"created_at": "DESC"},
    # )
    # op.execute("DROP INDEX IF EXISTS idx_task_logs_created_at")
    # op.create_index(
    #     "idx_task_logs_created_at",
    #     "task_execution_logs",
    #     ["created_at"],
    #     unique=False,
    #     postgresql_ops={"created_at": "DESC"},
    # )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_task_logs_created_at", table_name="task_execution_logs", postgresql_ops={"created_at": "DESC"})
    op.create_index(
        op.f("idx_task_logs_created_at"), "task_execution_logs", [sa.literal_column("created_at DESC")], unique=False
    )
    op.drop_index("idx_task_logs_composite", table_name="task_execution_logs", postgresql_ops={"created_at": "DESC"})
    op.create_index(
        op.f("idx_task_logs_composite"),
        "task_execution_logs",
        ["task_name", "status", sa.literal_column("created_at DESC")],
        unique=False,
    )
    op.create_table(
        "approval_rules",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("confidence_threshold", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
        sa.Column("similarity_threshold", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
        sa.Column("auto_action", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), server_default=sa.text("true"), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("approval_rules_pkey")),
    )
    # ### end Alembic commands ###
