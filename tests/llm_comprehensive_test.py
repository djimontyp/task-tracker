#!/usr/bin/env python3
"""Comprehensive test script to demonstrate LLM functionality with Ukrainian messages"""

# –ü—Ä–∏–º—ñ—Ç–∫–∞: –î–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Ruff - —à–≤–∏–¥–∫–∏–π –ª—ñ–Ω—Ç–µ—Ä —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫ Python,
# —è–∫–∏–π –æ–±'—î–¥–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ—ó flake8, black, isort —Ç–∞ —ñ–Ω—à–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤. –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ watch
# –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É –Ω–∞ —Ö–æ–¥—É.

import asyncio

from llm.ollama import OllamaProvider
from config import settings


def test_ollama_initialization():
    """Test that we can initialize the Ollama provider"""
    print("=" * 60)
    print("Ollama Provider Initialization Test")
    print("=" * 60)
    
    config = {
        "model": settings.ollama_model,
        "base_url": settings.ollama_base_url
    }
    
    print(f"Config model: {config['model']}")
    print(f"Config base_url: {config['base_url']}")
    
    try:
        provider = OllamaProvider(config)
        print(f"‚úì Successfully initialized Ollama provider")
        print(f"  Model: {provider.model_name}")
        print(f"  Base URL: {provider.base_url}")
        return provider
    except Exception as e:
        print(f"‚úó Failed to initialize Ollama provider: {e}")
        return None


async def test_classification(provider, test_message, test_name):
    """Test issue classification"""
    print(f"\n--- {test_name} ---")
    print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{test_message}'")
    
    try:
        result = await provider.classify_issue(test_message)
        print(f"‚úì –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞:")
        print(f"  Output: {getattr(result, 'output', result)}")
        try:
            print(f"  Usage: {result.usage()}")
        except Exception:
            pass
        return result
    except Exception as e:
        print(f"‚úó –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e}")
        return None


async def test_entity_extraction(provider, test_message, test_name):
    """Test entity extraction"""
    print(f"\n--- {test_name} ---")
    print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{test_message}'")
    
    try:
        result = await provider.extract_entities(test_message)
        print(f"‚úì –í–∏–¥–æ–±—É–≤–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π —É—Å–ø—ñ—à–Ω–µ:")
        print(f"  Output: {getattr(result, 'output', result)}")
        try:
            print(f"  Usage: {result.usage()}")
        except Exception:
            pass
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏ –≤—ñ–¥ LLM
        note_result = await provider.get_note_on_message(test_message)
        print(f"  –ü—Ä–∏–º—ñ—Ç–∫–∞ –≤—ñ–¥ LLM: {note_result}")
        
        return result
    except Exception as e:
        print(f"‚úó –í–∏–¥–æ–±—É–≤–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π –Ω–µ –≤–¥–∞–ª–æ—Å—è: {e}")
        return None


async def main():
    """Main test function"""
    print("=" * 60)
    print("–ö–æ–º–ø–ª–µ–∫—Å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó LLM –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏")
    print("=" * 60)
    
    # Test initialization
    provider = test_ollama_initialization()
    if not provider:
        return
    
    # Test cases with Ukrainian messages
    test_cases = [
        {
            "name": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É",
            "message": "–°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—Ö–æ–¥—É –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º—É—é—Ç—å –ø–æ–º–∏–ª–∫–∏ —Ç–∞–π–º–∞—É—Ç—É.",
            "type": "both"
        },
        {
            "name": "–ó–∞–ø–∏—Ç –Ω–∞ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é",
            "message": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –∑–≤—ñ—Ç—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF.",
            "type": "both"
        },
        {
            "name": "–ü–∏—Ç–∞–Ω–Ω—è",
            "message": "–î–æ–ø–æ–º–æ–∂—ñ—Ç—å –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —è–∫ –ø—Ä–∞—Ü—é—î —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó?",
            "type": "both"
        },
        {
            "name": "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —â–æ–¥–æ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è",
            "message": "–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏, –¥–æ–¥–∞–≤—à–∏ –∫—Ä–∞—â–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ.",
            "type": "both"
        },
        {
            "name": "",
            "message": "–Ø–∫ –∂–µ –≤–æ–Ω–æ –∑–∞—ó–±–∞–ª–æ! –ª–µ–Ω–¥ –ª–∞–≥–∞—î, —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–µ –≥—Ä—É–∑—è—Ç—å—Å—è! –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –≤–∂–µ —á–µ—Ä–≤–æ–Ω—ñ –≤ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –º–∏ –º–æ–º–µ–∂–º–æ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–æ–≤—ñ—Ä—É —Ç–∞ –∂–∏—Ä–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ—Ä–∞ –∑ –Ω—ñ—á–æ–≥–æ",
            "message": "–†–µ–±—è—Ç–∞, —Ö—Ç–æ —Ç–∞–∫–µ –Ω–∞–ø–∏—Å–∞–≤? –ö–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é –≤–ª—ñ—Ç–∞—î –≤ —ñ–Ω—à—É –≥–∞–ª–∞–∫—Ç–∏–∫—É –ø—Ä–∏ —Å–∫—Ä–æ–ª—ñ. –õ–û–õ, –Ω—É –≤–∏ –¥–∞—î—Ç–µ...",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ —Ç—ñ–º–ª—ñ–¥–∞ –≤ –ø–∞–Ω—ñ—Ü—ñ",
            "message": "–î–ï–í–°–¢–ê–ù–¶–Ü–Ø!!! –í—Å—ñ –Ω–∞ –º—ñ—Ç–∏–Ω–≥–∏, —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ! –ü—Ä–æ–¥–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∂–µ –≤–∏—Å–ª–∞–≤ –≤—ñ–π—Å—å–∫–æ–≤—ñ —á–∞—Å—Ç–∏–Ω–∏. –°–†–û–ß–ù–û —Ç—Ä–µ–±–∞ —Ñ—ñ–∫—Å–∏—Ç–∏ –±–∞–≥ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é!",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ –¥—ñ–¥—å–∫–∞ –∑ —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏",
            "message": "–ù—É –≤–∏ —ñ –¥–∞–ª–∏... –°–µ—Ä–≤–µ—Ä–∞ –ª—è–≥–ª–∏, –±–æ —Ö—Ç–æ—Å—å –≤–∏—Ä—ñ—à–∏–≤ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—Å—ñ –ª–æ–≥–∏ –≤ –ø–∞–º'—è—Ç—ñ. –¢–µ–ø–µ—Ä –≤—Å—ñ –≤ –¥—É–ø—ñ, —è–∫ –∑–∞–≤–∂–¥–∏.",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ –¥—ñ–∑–∞–π–Ω–µ—Ä–∫–∏ –≤ –Ω–µ–≥–æ–¥—É–≤–∞–Ω–Ω—ñ",
            "message": "–í–∏ —â–æ, –∑–æ–≤—Å—ñ–º –æ—á–µ–π –ø–æ–∑–±–∞–≤–∏–ª–∏—Å—å? –¶—ñ –∫–æ–ª—å–æ—Ä–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –Ω–∞—à–∏–º –≥–∞–π–¥–ª–∞–π–Ω–∞–º! –•—Ç–æ —Ä–æ–±–∏–≤ - —ñ–¥–∏ —Å—é–¥–∏, –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ.",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ –Ω–µ—Ç—Ä–æ–ø–∞ –Ω–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ",
            "message": "–¢–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –∑–Ω–æ–≤—É –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ. –í–∂–µ —Ç—Ä–µ—Ç—ñ–π –¥–µ–Ω—å –Ω–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ñ—ñ–∫—Å–∏. –ß–∏ –º–æ–∂–Ω–∞ —Ö–æ—á —Ç—Ä–æ—Ö–∏ –ø–æ–¥—É–º–∞—Ç–∏ –ø—Ä–æ —è–∫—ñ—Å—Ç—å?",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ –±–µ–∫–µ–Ω–¥–µ—Ä–∞ –≤ —Å—Ç–∏–ª—ñ —Ö—ñ–ø-—Ö–æ–ø",
            "message": "–ô–æ–π-–π–æ–π, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∏ –∑–Ω–æ–≤—É —â–æ—Å—å –Ω–∞–º—É–¥—Ä–∏–ª–∏ –∑ API. –í—Å—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å 500. –ë—Ä–∞—Ç–∞–Ω, —Ç—Ä–µ–±–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏—Å—å.",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ CEO –≤ —Å—Ç—Ä–µ—Å—ñ",
            "message": "–î—ñ—Ç–∏, –º–∏ –≤ –¥—É–ø—ñ –ø–æ –∫–æ–ª—ñ–Ω–æ! –ö–ª—ñ—î–Ω—Ç–∏ —Å–∫–∞—Ä–≥—É—é—Ç—å—Å—è, –∞–∫—Ü—ñ–æ–Ω–µ—Ä–∏ –Ω–µ—Ä–≤—É—é—Ç—å, –∞ –≤–∏ —Ç—É—Ç –±–∞–≥–∏ —Ñ—ñ–∫—Å–∏—Ç–µ. –ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ —Ä–µ–ª—ñ–∑–∏—Ç–∏ —Ö–æ—Ç—Ñ—ñ–∫—Å!",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —ñ—Ä–æ–Ω—ñ—î—é",
            "message": "–û, –Ω–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –î—ñ—è.AI! –ß—É–¥–æ–≤–æ, —â–µ –æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞, —è–∫–∞ –±—É–¥–µ –≤–∏—Ç—è–≥—É–≤–∞—Ç–∏ –º–æ—ó –¥–∞–Ω—ñ. –ê –º–æ–∂–µ —â–µ –π –∫–∞–≤—É –∑—Ä–æ–±–∏—Ç—å?",
            "type": "both"
        },
        {
            "name": "–í—ñ–¥ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –∑ —Å—É–º–Ω—ñ–≤–∞–º–∏",
            "message": "–õ—é–¥–∏ —Ö–≤–æ—Ä—ñ—é—Ç—å, —ñ –±—É–≤–∞—é—Ç—å –Ω—é–∞–Ω—Å–∏. –ê–ª–µ –∂ –º–∏ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –ø–æ-—à–≤–∏–¥—à–µ –∑—Ä–æ–±–∏—Ç–∏. –•–æ—á–∞ —ñ–Ω–æ–¥—ñ –≤–∏–Ω–∏–∫–∞—î –≤—ñ–¥—á—É—Ç—Ç—è, —â–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–∞–∂–ª–∏–≤—ñ—à–∞ –∑–∞ —è–∫—ñ—Å—Ç—å.",
            "type": "both"
        },
        # –¢—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –±—É–ª–∏ –∑–∞–ø–∏—Ç–∞–Ω—ñ
        {
            "name": "–ü—Ä–æ Ruff —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É",
            "message": "–¥–æ–¥–∞–π —â–µ ---- —è –±–∏ –∑–∞—é–∑–∞–≤ ruff - https://docs.astral.sh/ruff/faq/. –°–∞–º –¥–æ –Ω—å–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–≤—Å—è –±–ª–µ–∫–æ–º. –≤—ñ–Ω –æ–±'—î–¥–Ω–∞–≤ —É —Å–æ–±—ñ flake, black, isort —Ç–∞ –∫—É—á—É —É—Å—å–æ–≥–æ —ñ–Ω—à–æ–≥–æ. —ñ –¥—É–∂–µ —à–≤–∏–¥–∫–æ –ø—Ä–∞—Ü—é—î —Ç–∞ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç–∏ —É —Ä–µ–∂–∏–º—ñ –≤–æ—Ç—á —ñ –Ω–∞ —Ö–æ–¥—É —â–æ –± –≤—ñ–Ω —Ñ–æ–Ω–æ–≤–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–≤. ----",
            "type": "both"
        },
        {
            "name": "–ü—Ä–æ —Ö–≤–æ—Ä–æ–±–∏ –ª—é–¥–µ–π —Ç–∞ –Ω—é–∞–Ω—Å–∏",
            "message": "–ª—é–¥–∏ —Ö–≤–æ—Ä—ñ—é—Ç—å. —ñ –±—É–≤–∞—é—Ç—å –Ω—é–∞–Ω—Å–∏. –∞–ª–µ –∂ –º–∏ —Å—Ç–∞—Ä–∞—î–º–æ—Å—å –ø–æ-—à–≤–∏–¥—à–µ –∑—Ä–æ–±–∏—Ç–∏)",
            "type": "both"
        },
        {
            "name": "–ü—Ä–æ –î—ñ—è.AI",
            "message": "–ü–µ—Ä—à–∏–π —É —Å–≤—ñ—Ç—ñ üåç –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö –ø–æ—Å–ª—É–≥: —Å–∫–∞–∂—ñ—Ç—å ¬´–ü—Ä–∏–≤—ñ—Ç¬ª –î—ñ—è.A–Ü üëãüèª –£ –Ω–∞—Å –∑'—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –î—ñ—è.A–Ü ‚Äî  –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–Ω –Ω–∞–¥–∞–≤–∞—Ç–∏–º–µ –¥–µ—Ä–∂–∞–≤–Ω—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏–º–µ –≤–∞—Å —â–æ–¥–æ –Ω–∏—Ö –Ω–∞ –ø–æ—Ä—Ç–∞–ª—ñ –î—ñ—è [—Å–∫–æ—Ä–æ –∑–∞–ø—É—Å—Ç–∏–º–æ –º–æ–±—ñ–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é]. –ê—Å–∏—Å—Ç–µ–Ω—Ç —Å–ø—ñ–ª–∫—É—î—Ç—å—Å—è —É —Ñ–æ—Ä–º–∞—Ç—ñ —á–∞—Ç—É –Ω–∞ –ø–æ—Ä—Ç–∞–ª—ñ –î—ñ—è üí¨ —è–∫ –∂–∏–≤–∞ –ª—é–¥–∏–Ω–∞. –í—ñ–Ω –ª–µ–≥–∫–æ –ø—ñ–¥–±–µ—Ä–µ –ø–æ—Å–ª—É–≥—É –ø—ñ–¥ –≤–∞—à—É –∂–∏—Ç—Ç—î–≤—É —Å–∏—Ç—É–∞—Ü—ñ—é: —è–∫:–æ—Ç –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –º–∞–ª—é–∫–∞ —á–∏ –∑–∞–ø—É—Å–∫ –≤–ª–∞—Å–Ω–æ—ó —Å–ø—Ä–∞–≤–∏. –Ü –≥–æ–ª–æ–≤–Ω–µ ‚Äî –≤—ñ–Ω –Ω–∞ –∑–≤'—è–∑–∫—É —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ. –î—ñ—è.–ê–Ü ‚Äî –≤–∞—à –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö –ø–æ—Å–ª—É–≥. –ë—É–¥—É—á–∏ –≤—É–∑—å–∫–æ–ø—Ä–æ—Ñ—ñ–ª—å–Ω–∏–º —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º, –≤—ñ–Ω –Ω–µ –ø–æ—Ä–∞–¥–∏—Ç—å –≤–∞–º —ñ–º'—è –¥–ª—è –∫–æ—Ç–∞ —á–∏ —Ä–µ—Ü–µ–ø—Ç —Ç–æ–º- —è–º—É. –ô–æ–≥–æ —Å—Ñ–µ—Ä–∞ ‚Äî –≤–∏–∫–ª—é—á–Ω–æ –¥–µ—Ä–∂–∞–≤–Ω—ñ –ø–æ—Å–ª—É–≥–∏ üíÅüèº‚Äç‚ôÇÔ∏è –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞ –∑–∞–ø–∏—Ç ¬´–Ø–∫ –ø–µ—Ä–µ—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∞–≤—Ç–æ?¬ª  –≤—ñ–Ω –Ω–∞–¥–∞—Å—Ç—å –ø–æ–∫—Ä–æ–∫–æ–≤—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é. –ê –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é ¬´–î–∞–π –¥–æ–≤—ñ–¥–∫—É –ø—Ä–æ –¥–æ—Ö–æ–¥–∏¬ª  –æ–¥—Ä–∞–∑—É –∑–∞–º–æ–≤–∏—Ç—å —ó—ó –¥–ª—è –≤–∞—Å [—ñ —Ü–µ –ª–∏—à–µ –ø–µ—Ä—à–∞ –∑ –±–∞–≥–∞—Ç—å–æ—Ö –ø–æ—Å–ª—É–≥, —â–æ –∑'—è–≤–ª—è—Ç—å—Å—è –¥–æ –∫—ñ–Ω—Ü—è —Ä–æ–∫—É]. –Ø–∫ –ø–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É –∑ –î—ñ—è.–ê–Ü: 1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ –ø–æ—Ä—Ç–∞–ª –î—ñ—è 2Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å ¬´–î—ñ—è.A–Ü¬ª –Ω–∞–¥ –ø–æ—à—É–∫–æ–≤–æ—é —Å—Ç—Ä—ñ—á–∫–æ—é 3Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç –ß–∏ –∑–∞–º—ñ–Ω—è—î –ê–Ü-–∞—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –î—ñ—ó? üßê –ù—ñ, –ê–Ü-–∞—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–Ω—Å—É–ª—å—Ç—É—î —Ç–∞ –Ω–∞–¥–∞—î –≥–æ—Ç–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏, –∞ –∫–æ–º–∞–Ω–¥–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –π –Ω–∞–¥–∞–ª—ñ –±—É–¥–µ –Ω–∞ –∑–≤‚Äò—è–∑–∫—É –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π —É –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É –±–µ—Ç–∞-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ —â–µ –∞–∫—Ç–∏–≤–Ω–æ –Ω–∞–≤—á–∞—î—Ç—å—Å—è. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –π–æ–≥–æ. –ó–∞—Ö–æ–¥—å—Ç–µ –Ω–∞ –ø–æ—Ä—Ç–∞–ª, —Ç–µ—Å—Ç—É–π—Ç–µ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏, —ñ –∑–∞–ª–∏—à–∞–π—Ç–µ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ üëçüèª —á–∏ üëéüèª –Ω–∞ –π–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ [–Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ –¥–æ–¥–∞–≤–∞–π—Ç–µ —É —Å—Ç–æ—Ä–∏–∑ —ñ–∑ –≤—ñ–¥–º—ñ—Ç–∫–æ—é –î—ñ—ó]. –î–µ—Ä–∂–∞–≤–∞ —Å—Ç–∞—î –±–ª–∏–∂—á–æ—é –¥–æ –≤–∞—Å. –ó–∞–ø–∏—Ç–∞–π—Ç–µ —É –î—ñ—è.A–Ü —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å ‚ö°Ô∏è –î—ñ—è.–ê–Ü —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–æ –∑–∞ —Å–ø—Ä–∏—è–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É ¬´–¶–∏—Ñ—Ä–æ–≤—ñ–∑–∞—Ü—ñ—è –¥–ª—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è, –¥–æ–±—Ä–æ—á–µ—Å–Ω–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ¬ª (UK DIGIT), —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –§–æ–Ω–¥–æ–º –Ñ–≤—Ä–∞–∑—ñ—è —ñ —Ñ—ñ–Ω–∞–Ω—Å—É—î—Ç—å—Å—è UK Dev,  —Ç–∞ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —à–≤–µ–π—Ü–∞—Ä—Å—å–∫–æ-—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ EGAP, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –§–æ–Ω–¥–æ–º –°—Ö—ñ–¥–Ω–∞ –Ñ–≤—Ä–æ–ø–∞.",
            "type": "both"
        }
    ]
    
    # Run tests
    for test_case in test_cases:
        if test_case["type"] in ["both", "classification"]:
            await test_classification(provider, test_case["message"], test_case["name"])
        if test_case["type"] in ["both", "extraction"]:
            await test_entity_extraction(provider, test_case["message"], test_case["name"])
    
    print("\n" + "=" * 60)
    print("–í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())
