default:
    @just --list

# Aliases
alias ss := services
alias st := services-stop
alias sc := services-clean
alias sca := services-clean-all
alias dbc := db-clear
alias dbs := db-seed
alias dbr := db-reset
alias dbtc := db-topics-clear
alias dbts := db-topics-seed
alias dbtr := db-topics-reset
alias dbac := db-analysis-clear
alias dbas := db-analysis-seed
alias dbar := db-analysis-reset
alias dbfs := db-full-seed
alias dbfr := db-full-reset
alias f := fmt
alias fc := fmt-check


# Reinstall UV venv and all deps localy
rds:
    rm -rf .venv
    uv venv --python 3.13
    uv sync --all-groups

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤
SERVICES := "postgres nats worker api dashboard nginx"

# Start services (production mode)
services:
    @echo "Starting services (postgres nats worker api dashboard nginx)..."
    docker compose up -d postgres nats worker api dashboard nginx
    @echo "Services started."
    @echo "üåê Available at: http://localhost"
    @echo "üì± Telegram WebApp: http://localhost/webapp"
    @echo "üìä Dashboard: http://localhost/dashboard"
    @echo "üîó Webhook URL: http://localhost/webhook/telegram"

# Start services in development mode with watch
services-dev:
    @echo "Starting services in development mode with file watching..."
    docker compose watch
    @echo "Restarting nginx to refresh connections..."
    docker restart task-tracker-nginx || true

# Start specific service in development mode
dev SERVICE:
    @echo "Starting {{SERVICE}} in development mode..."
    docker compose watch {{SERVICE}}

# Rebuild specific service
rebuild SERVICE:
    @echo "Rebuilding {{SERVICE}}..."
    COMPOSE_BAKE=true docker compose build {{SERVICE}} --no-cache
    docker compose up -d {{SERVICE}}


# Stop services
services-stop:
    @echo "Stopping services..."
    docker compose down postgres nats worker api dashboard nginx
    @echo "Services stopped."

# Full clean services without volumes
services-clean:
    @echo "Stopping and removing services containers..."
    docker compose down
    @echo "Services containers removed."

# Full clean services with images removal
services-clean-all:
    @echo "Stopping and removing services containers and images..."
    docker compose down --rmi all
    @echo "Services containers and images removed."

# Run tests
test:
    @echo "Running tests..."
    uv run python -m pytest

# Run Alembic migrations
alembic-up:
    @echo "Applying database migrations..."
    uv run alembic upgrade head

# Create alembic autogenerated migration
alembic-auto *ARGS:
    @echo "Creating database migration..."
    uv run alembic revision --autogenerate {{ARGS}}

# Format code: organize imports + format style
[group: 'Quality']
fmt PATH='backend':
    @echo "üé® Formatting {{PATH}}..."
    @uv run ruff check {{PATH}} --select I,F401,UP --fix --unsafe-fixes --show-fixes
    @uv run ruff format {{PATH}}
    @echo "‚ú® Format complete!"

# Check formatting without changes (CI)
[group: 'Quality']
fmt-check PATH='backend':
    @echo "üîç Checking format on {{PATH}}..."
    @uv run ruff check {{PATH}} --select I,F401,UP
    @uv run ruff format {{PATH}} --check
    @echo "‚úÖ Format check passed!"

# Install dependencies
install-dev:
    @echo "Installing dependencies..."
    uv sync --all-groups

# Upgrade dependencies
upgrade:
    @echo "Updating dependencies..."
    uv lock --upgrade --all-groups

# Serve MkDocs documentation locally with live reload
docs:
    @echo "Serving documentation with live reload..."
    uv run --group docs mkdocs serve --config-file docs/mkdocs.yml --dev-addr 127.0.0.1:8081 --livereload

# Clear all test data from database
db-clear:
    @echo "Clearing database..."
    uv run python scripts/seed_db.py --clear

# Seed test data into database
db-seed COUNT="50":
    @echo "Seeding {{COUNT}} tasks..."
    uv run python scripts/seed_db.py --seed --count {{COUNT}}

# Clear and seed database (fresh start)
db-reset COUNT="50":
    @echo "Resetting database with {{COUNT}} tasks..."
    uv run python scripts/seed_db.py --clear --seed --count {{COUNT}}

# Clear topics, atoms, messages and relationships
db-topics-clear:
    @echo "Clearing topics, atoms, and messages..."
    cd backend && uv run python scripts/seed_topics_atoms.py --clear

# Seed topics, atoms, messages and relationships
db-topics-seed TOPICS="5" ATOMS="10" MESSAGES="20":
    @echo "Seeding {{TOPICS}} topics with {{ATOMS}} atoms and {{MESSAGES}} messages each..."
    cd backend && uv run python scripts/seed_topics_atoms.py --seed --topics {{TOPICS}} --atoms {{ATOMS}} --messages {{MESSAGES}}

# Clear and seed topics/atoms (fresh start)
db-topics-reset TOPICS="5" ATOMS="10" MESSAGES="20":
    @echo "Resetting topics with {{TOPICS}} topics, {{ATOMS}} atoms, {{MESSAGES}} messages..."
    cd backend && uv run python scripts/seed_topics_atoms.py --clear --seed --topics {{TOPICS}} --atoms {{ATOMS}} --messages {{MESSAGES}}

# Seed topics, atoms, and messages for testing
seed-topics COUNT="5":
    @echo "Seeding {{COUNT}} topics with atoms and messages..."
    uv run python scripts/seed_topics_atoms.py --seed --topics {{COUNT}}

# Clear all topics, atoms, and messages
clear-topics:
    @echo "Clearing topics, atoms, and messages..."
    uv run python scripts/seed_topics_atoms.py --clear

# Reset topics data (clear + seed)
reset-topics COUNT="5":
    @echo "Resetting topics data..."
    uv run python scripts/seed_topics_atoms.py --clear --seed --topics {{COUNT}}

# Clear Analysis System data (providers, agents, tasks, runs, proposals)
db-analysis-clear:
    @echo "Clearing Analysis System data..."
    cd backend && uv run python scripts/seed_analysis_system.py --clear

# Seed Analysis System data
db-analysis-seed RUNS="10" PROPOSALS="30":
    @echo "Seeding Analysis System: {{RUNS}} runs, {{PROPOSALS}} proposals..."
    cd backend && uv run python scripts/seed_analysis_system.py --seed --runs {{RUNS}} --proposals {{PROPOSALS}}

# Clear and seed Analysis System (fresh start)
db-analysis-reset RUNS="10" PROPOSALS="30":
    @echo "Resetting Analysis System with {{RUNS}} runs, {{PROPOSALS}} proposals..."
    cd backend && uv run python scripts/seed_analysis_system.py --clear --seed --runs {{RUNS}} --proposals {{PROPOSALS}}

# Seed EVERYTHING: tasks + topics + analysis system
db-full-seed:
    @echo "üå± Full database seeding..."
    @just db-seed 50
    @just db-topics-seed 5 10 20
    @just db-analysis-seed 10 30
    @echo "‚úÖ Complete database populated!"

# Clear and seed EVERYTHING (nuclear reset)
db-full-reset:
    @echo "üóëÔ∏è  Nuclear database reset..."
    @just db-clear
    @just db-topics-clear
    @just db-analysis-clear
    @echo "üå± Reseeding everything..."
    @just db-seed 50
    @just db-topics-seed 5 10 20
    @just db-analysis-seed 10 30
    @echo "‚úÖ Complete database reset finished!"

# Run API tests for atoms
test-atoms:
    @echo "Running atoms API tests..."
    uv run pytest tests/api/test_atoms.py -v

# Run all tests with coverage
test-all:
    @echo "Running all tests with coverage..."
    uv run pytest --cov=app --cov-report=term-missing
