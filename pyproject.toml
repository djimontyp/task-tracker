[project]
name = "pulse_radar"
version = "0.1.0"
description = "AI-powered contextual workspace that organizes project information in smart, living knowledge containers with real-time pulse monitoring and intelligent automation."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "alembic-postgresql-enum>=1.8.0",
    "alembic>=1.16.5",
    "loguru>=0.7.3",
    "sqlalchemy>=2.0.43",
    "pydantic-settings>=2.10.1",
    "taskiq>=0.11.18",
    "sqlmodel>=0.0.24",
    "taskiq-nats>=0.5.1",
    "asyncpg>=0.30.0",
    "fastapi>=0.117.1",
    "uvicorn>=0.35.0",
    "pydantic-ai>=1.0.10",
    "httpx>=0.28.1",
    "aiogram>=3.22.0",
    "cryptography>=45.0.0",
    "greenlet>=3.2.4",
    "telethon>=1.38.1",
    "email-validator>=2.2.0",
    "pgvector>=0.4.1",
    "deepdiff>=8.6.1",
    "apscheduler>=3.11.0",
    "psycopg2-binary>=2.9.11",
    "jinja2>=3.1.6",
    "tenacity>=9.0.0",
]


[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "ruff>=0.12.11",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "aiosqlite>=0.19.0",
    "pytest-cov>=7.0.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-static-i18n>=1.2.0",
    "lunr[languages]>=0.6.0",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["backend/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"
markers = [
    "asyncio: mark test as asyncio",
]
pythonpath = ["backend"]

[tool.ruff]
# Line length
line-length = 120
indent-width = 4

# Target Python version
target-version = "py312"

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "build",
    "dist",
    "node_modules",
]

[tool.ruff.lint]
# Minimal linting rules (focus on auto-fixable improvements)
select = [
    "I",     # isort - import sorting
    "F401",  # unused imports
    "UP",    # pyupgrade - modernize Python syntax
]

# Allow automatic fixes
fixable = ["ALL"]
unfixable = []

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"backend/alembic/versions/*.py" = ["ALL"]  # Auto-generated migration files
"backend/alembic/env.py" = ["E402"]
"backend/core/config.py" = ["F403", "F405"]  # Allow star imports in settings
"backend/tests/**/*.py" = ["S101", "INP001"]  # Allow asserts in tests
"scripts/*.py" = ["T20", "INP001"]  # Allow print statements in scripts
"__init__.py" = ["F401", "E402"]  # Allow re-exports

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.format]
# Quote style
quote-style = "double"

# Indentation
indent-style = "space"

# Line endings
line-ending = "auto"

# Magic trailing comma behavior (like Black)
skip-magic-trailing-comma = false

# Format code examples in docstrings
docstring-code-format = true
docstring-code-line-length = "dynamic"

# Enable preview features
preview = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
show_error_codes = true

exclude = [
    "^alembic/versions/.*\\.py$",
    "^scripts/.*\\.py$",
    "^tests/.*\\.py$",
]

[[tool.mypy.overrides]]
module = [
    "aiogram.*",
    "telethon.*",
    "taskiq.*",
    "taskiq_nats.*",
    "alembic.*",
]
ignore_missing_imports = true
